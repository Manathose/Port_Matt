h1 { 
  width: 2084px;
    height: 267px;
    flex-shrink: 0;
    color: #000;
  
  text-align: center;
  font-family: Inter;
  font-size: 234px;
  font-style: normal;
  font-weight: 900;
  line-height: normal;
    margin-top: 20px;
  }
  .dev-menu {
      padding: 10px 20px;
      display: inline-block;
      border: 2px solid #EFD1C3;
      border-radius: 50px;
      background-color: var(--primary-color);
      /*display: flex;*/
      margin-left: auto;
      margin-right:auto;
      /* flex-wrap: wrap; */
      /* align-items: center; */
      gap: 0 10px;
     /* position: relative; */
      justify-content: center; 
      transform-origin: 50% 0%;
      height: auto;
      transform: translateY(0);
      transition: 0.4s ease transform;
      list-style-type: none;
      width: fit-content;
      position: fixed;
      position: center;

  }
.solve {
display: flex;
justify-content: center;
}

li { 
  display: inline-block;
}
  
    .smallbold {
      color: #000;
  
    text-align: center;
    font-family: Inter;
    font-size: 20px;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
    margin: 0 auto;
    }
  h2 {
  color: #000;
  text-align: center;
  font-family: Inter;
  font-size: 20px;
  font-style: normal;
  font-weight: 700;
  line-height: normal;
  }
  h3 {
    width: 224px;
  height: 31px;
  flex-shrink: 0;
    color: #000;
  font-family: Inter;
  font-size: 24px;
  font-style: normal;
  font-weight: 500;
  line-height: normal;
  
  }
  h4 { 
  color: #000;
  font-family: Inter;
  font-size: 36px;
  font-style: normal;
  font-weight: 700;
  line-height: normal;}
  
 .paddingtest{
  padding-left: 25%;
  padding-right: 25%;
 }

/* 
Css can't live on its own. It needs an html title. 
Works as declarations

Writing CSS
  h1 is "selector" So all h1 tags will be edited.
  : is used instead to assign values
  ; statement end. ends the style line.
  is held within {}

Attributes
  class= is a naming convention 
  you can call the convetion using .class-name
  class="headline" call it using .headling {}
  Call id using the #

Font-families
Provide fall back fonts by applying multiple properties
font-family: helvetica, arial, sans-serif;
font-style: italic;
font-size: pixel amount; Could change the padding and bounding box. Use margins to fix it.
font-weight: bold, or 100-900

outline: solid; useful for looking at sizing.

The box model
    layered inside to out Content, padding, borer, margin
    content: incldues text and images
    padding: space around content, define its properties by setting its spacing attributes
    border: a border encloses the padding and content
    margin: the empty space around the border it is transparent.

     Position elements
     Float property { places it on the left or right side of the container wrapping text around it.}
     Display: block; 
     display: inline;
     display: none;
     display: inline-block the element itself is formatted as an inline element but you can apply  height and width

    Block elements stack, inline elemetns next to eachother, html/css inline-block element sline up next to each other like inline elemnts You can give inline-block elements height and widths.

    Using Relative Unites
      CSS width Based Percentages using relative units


      Position: static;
      respects the flow of the content and scrolls with it. 
      position: relative or rop. left, right, and bottom: Sets a box or thing as a reference poitn so Absolute knows where to go. For exmaple go 30 steps left of Mcdonalds. You now know where to start an where to go.
      position: absolute;
      Position: fixed; It is positioned on the viewport fo the browser and will always stay where  you put it even if the user scrolls down the page.
      Position: sticky; stays fixed until it hits the top of the viewport 

      CSS flesbox Create elements that grow, shrink or fit together
      display: flex; Use it on the parent element. So a section or div that becomes a flex box container that controls the children.
      flex-direction: row or column; dispalys as column or row. 

      Even spreading etc.
        These go into the children containers.
        Fills any available empty space. When there are two available units you split the remaining space so on and so forth.
        Flex-grow: 1; Fill space horizontally 
        Flex-grow 2; 

        Child 1 gets 1 flex box and child 2 gets to 2 flex box elements. So 1/3 and 2/3 of the available space left. (
        (Super confusing)


        align-items: aligns in container top and bottom
            flex-start; Beginning of the container (top)
            flex-end; Bottom of the container (bottom)
            center; middle of container
            baseline; text align 
            stretch; Fills whole space but only top and bottom

        Justify-content: content across the left and right 
            flex-start; default
            flex-end; end of container
            center; center of container
            space-between; evenly distributed in the line first item is beginning and last item is end.
            space-around; Equal space around them so equal margin
            space-evenly; space-between but includes the left and right margin.

            You can nest flex-boxes lmao
            Keep a pen and paper handy so you can draw parent child relationships
            Flexbox only affect direct children

            parents are references for the flex boxes property.

            So some affect only children but are placed in the parent and others are put in the children and only affect them.
    */
